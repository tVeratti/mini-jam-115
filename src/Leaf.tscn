[gd_scene load_steps=5 format=3 uid="uid://bx86jwxuba0cr"]

[sub_resource type="GDScript" id="GDScript_ls7ra"]
resource_name = "Leaf"
script/source = "extends RigidBody3D


class_name Leaf


signal fall_end(duration, transform)


const MAX_LINEAR_SPEED:float = 50.0
const MAX_ANGULAR_SPEED:float = 20.0
const INPUT_FORCE:float = 0.02
const DRAG_FORCE:float = 0.5
const WIND_FORCE:float = 0.4


var input_torque:Vector3 = Vector3.ZERO
var wind_origin:Vector3 = Vector3.ZERO
var wind_direction:Vector3 = Vector3.ZERO

var fall_start_time:float = 0.0
var fall_end_time:float = 0.0
var end_transform:Transform3D

var has_started:bool = false


@onready var mesh:MeshInstance3D = $MeshInstance3d


func _ready():
	constant_force = Wind.steady
	
	Wind.start.connect(self._on_wind_start)
	Wind.end.connect(self._on_wind_end)


func _process(delta):
	input_torque = Vector3.ZERO
	
	if Input.is_action_pressed(\"ui_left\"):
		input_torque.z += INPUT_FORCE
	if Input.is_action_pressed(\"ui_right\"):
		input_torque.z -= INPUT_FORCE
	if Input.is_action_pressed(\"ui_up\"):
		input_torque.x -= INPUT_FORCE
	if Input.is_action_pressed(\"ui_down\"):
		input_torque.x += INPUT_FORCE


func _physics_process(delta):
	if has_started:
		if linear_velocity.length() < 0.1:
			end_fall()
	else:
		if linear_velocity.length() > 0.1:
			has_started = true


func start_fall():
	freeze = false
	set_process(true)
	
	fall_start_time = Time.get_ticks_msec()


func end_fall():
	freeze = true
	set_process(false)
	
	fall_end_time = Time.get_ticks_msec()
	var duration:float = fall_end_time - fall_start_time
	fall_end.emit(duration, global_transform)
	

func _on_wind_start(origin:Vector3, direction:Vector3):
	wind_origin = origin
	wind_direction = direction


func _on_wind_end():
	wind_origin = Vector3.ZERO
	wind_direction = Vector3.ZERO


func _integrate_forces(state:PhysicsDirectBodyState3D):
	var angular_speed:float = state.angular_velocity.length()
	var is_flipped:bool = global_transform.basis.y.y < 0.0
	
	var rotation_x:float = global_transform.basis.y.x
	var horizontal_force:float = rotation_x
	if is_flipped: horizontal_force *= -1
	
	var rotation_z:float = global_transform.basis.y.z 
	var forward_force:float = rotation_z * 0.4
	if is_flipped: forward_force *= -1
	
	# If the leaf is more vertical, it should fall faster.
	var rotation_abs:float = abs(rotation_x) # 0.0 is vertical --> 1.0 is horizontal
	var vertical_force = lerp(0.0, -0.5, rotation_abs)
	
	if wind_direction != Vector3.ZERO:
		if angular_speed > MAX_ANGULAR_SPEED: wind_origin = Vector3.ZERO
		apply_force(wind_direction, wind_origin)
		
	if input_torque != Vector3.ZERO:
		apply_torque(input_torque)
	
	# If no other torque is being applied allow the leaf to attempt to stabilize itself
	if state.angular_velocity.length() < 1.0 and input_torque == Vector3.ZERO and wind_direction == Vector3.ZERO:
		var stabilize_torque_z:float = lerp(0.0, 0.01, rotation_x)
		var stabilize_torque_x:float = lerp(0.0, 0.01, -rotation_z)
		apply_torque(Vector3(stabilize_torque_x, 0, stabilize_torque_z))
	
	# Use the leaf's rotation to add force which should simulate
	# the air/atmo pressure being applied to the turned surface of the leaf.
	apply_central_force(Vector3(horizontal_force, vertical_force, forward_force))
	
	# Cap the leaf lineaer & angular velocity
	if state.linear_velocity.length() > MAX_LINEAR_SPEED:
		state.linear_velocity = state.linear_velocity.normalized() * MAX_LINEAR_SPEED
	if angular_speed > MAX_ANGULAR_SPEED:
		state.angular_velocity = state.angular_velocity.normalized() * MAX_ANGULAR_SPEED
	
"

[sub_resource type="PlaneMesh" id="PlaneMesh_svv4g"]
size = Vector2(2, 1)

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_1ateu"]
cull_mode = 2

[sub_resource type="BoxShape3D" id="BoxShape3D_u0q8b"]
size = Vector3(2, 0.5, 1)

[node name="Leaf" type="RigidBody3D"]
axis_lock_angular_y = true
mass = 0.01
linear_damp = 1.2
angular_damp_mode = 1
angular_damp = 1.0
script = SubResource("GDScript_ls7ra")

[node name="MeshInstance3d" type="MeshInstance3D" parent="."]
mesh = SubResource("PlaneMesh_svv4g")
surface_material_override/0 = SubResource("StandardMaterial3D_1ateu")

[node name="CollisionShape3d" type="CollisionShape3D" parent="."]
shape = SubResource("BoxShape3D_u0q8b")
