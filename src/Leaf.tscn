[gd_scene load_steps=5 format=3 uid="uid://bx86jwxuba0cr"]

[sub_resource type="GDScript" id="GDScript_ls7ra"]
resource_name = "Leaf"
script/source = "extends RigidBody3D


class_name Leaf

const MAX_SPEED:float = 100.0
const INPUT_FORCE:float = 0.1
const DRAG_FORCE:float = 0.5
const WIND_FORCE:float = 0.5


var input_torque:Vector3 = Vector3.ZERO
var wind_origin:Vector3 = Vector3.ZERO
var wind_direction:Vector3 = Vector3.ZERO


@onready var mesh:MeshInstance3D = $MeshInstance3d


func _ready():
	Wind.start.connect(self._on_wind_start)
	Wind.end.connect(self._on_wind_end)


func _process(delta):
	input_torque = Vector3.ZERO
	
	if Input.is_action_pressed(\"ui_left\"):
		input_torque.z += INPUT_FORCE
	if Input.is_action_pressed(\"ui_right\"):
		input_torque.z -= INPUT_FORCE
	if Input.is_action_pressed(\"ui_up\"):
		input_torque.x += INPUT_FORCE
	if Input.is_action_pressed(\"ui_down\"):
		input_torque.x -= INPUT_FORCE


func _on_wind_start(origin:Vector3, direction:Vector3):
	wind_origin = origin
	
	var norm_direction:Vector3 = direction.normalized() * WIND_FORCE
	wind_direction = Vector3(
		norm_direction.x,
		direction.y,
		norm_direction.z)
	
	# This impulse will spin the leaf (offset), but the rest of the wind only pushes it (central force).
	apply_impulse(norm_direction / 10, origin)


func _on_wind_end():
	wind_origin = Vector3.ZERO
	wind_direction = Vector3.ZERO


func _integrate_forces(state:PhysicsDirectBodyState3D):
	if wind_direction != Vector3.ZERO:
		apply_central_force(wind_direction)
		
	if input_torque != Vector3.ZERO:
		apply_torque(input_torque)
	
	var is_flipped:bool = global_transform.basis.y.y < 0.0
	
	var rotation_x:float = global_transform.basis.y.x
	var horizontal_force:float = rotation_x
	if is_flipped: horizontal_force *= -1
	
	var forward_force:float = global_transform.basis.y.z * 0.1
	if is_flipped: forward_force *= -1
	
	# If the leaf is more vertical, it should fall faster.
	var rotation_abs:float = abs(rotation_x) # 0.0 is vertical --> 1.0 is horizontal
	var vertical_force = lerp(0.0, -0.5, rotation_abs)
	
	# Use the leaf's rotation to add force which should simulate
	# the air/atmo pressure being applied to the turned surface of the leaf.
	apply_central_force(Vector3(horizontal_force, vertical_force, forward_force))
	
	
	# Cap the leaf velocity
	if state.linear_velocity.length() > MAX_SPEED:
		state.linear_velocity = state.linear_velocity.normalized() * MAX_SPEED
	
"

[sub_resource type="PlaneMesh" id="PlaneMesh_svv4g"]
size = Vector2(2, 1)

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_1ateu"]
cull_mode = 2

[sub_resource type="BoxShape3D" id="BoxShape3D_u0q8b"]
size = Vector3(2, 0.1, 1)

[node name="Leaf" type="RigidBody3D"]
axis_lock_angular_y = true
mass = 0.01
linear_damp_mode = 1
linear_damp = 1.0
angular_damp = 2.0
script = SubResource("GDScript_ls7ra")

[node name="MeshInstance3d" type="MeshInstance3D" parent="."]
mesh = SubResource("PlaneMesh_svv4g")
surface_material_override/0 = SubResource("StandardMaterial3D_1ateu")

[node name="CollisionShape3d" type="CollisionShape3D" parent="."]
shape = SubResource("BoxShape3D_u0q8b")
